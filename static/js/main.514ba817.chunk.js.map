{"version":3,"sources":["components/MappingCell.js","components/InputCell.js","components/CellSelector.js","components/Table.js","utils/read-excel-file/unpack.js","utils/read-excel-file/xmlNode.js","utils/read-excel-file/parseDate.js","utils/read-excel-file/readXlsx.js","utils/read-excel-file/types/Integer.js","utils/read-excel-file/types/URL.js","utils/read-excel-file/types/Email.js","utils/read-excel-file/convertToJson.js","utils/read-excel-file/convertMapToSchema.js","utils/read-excel-file/read.js","utils/read-excel-file/index.js","utils/excel.js","App.js","reportWebVitals.js","index.js"],"names":["MappingCell","id","addMapping","mailManifestHeaders","mapping","onChange","event","target","value","map","header","InputCell","addValue","type","CellSelector","isHidden","useState","cellType","setCellType","className","Table","mappings","templateHeaders","toggleColumn","values","visibilitySettings","indexOf","checked","length","unpackXlsxFile","file","a","loadAsync","zip","files","forEach","_","zipEntry","dir","push","name","entries","Promise","all","file_1","async","content","xmlNode","createDocument","XMLDOM","DOMParser","parseFromString","select","doc","node","path","namespaces","xpath","useNamespaces","parseExcelDate","excelSerialDate","options","epoch1904","Date","Math","round","r","rr","letters","colToInt","col","n","i","CellCoords","coords","split","parseInt","trim","Cell","cellNode","sheet","xml","styles","properties","getAttribute","textContent","undefined","parseFloat","style","numberFormat","dateFormat","template","smartDateParser","tokens","token","isDateTemplate","parseDate","row","column","dropEmptyRows","data","rowMap","accessor","onlyTrimAtTheEnd","empty","cell","splice","dropEmptyColumns","j","parseSheet","cells","dimensions","comparator","b","allRows","sort","allCols","minRow","maxRow","calculateDimensions","parseValues","strings","string","join","parseStyles","baseStyles","parseCellStyle","numFmts","parseNumberFormatStyle","reduce","formats","format","xf","hasAttribute","xfId","numFmt","numberFormatId","parseProperties","book","workbookProperties","sheets","relationId","parseFileNames","document","fileNames","sharedStrings","relationship","filePath","Error","createSheetNotFoundError","sheetsList","Integer","URL","regexp","Email","DEFAULT_OPTIONS","isColumnOriented","convertToJson","schema","Object","keys","key","prop","validateSchema","transpose","columns","results","errors","result","read","error","rows","rowIndex","object","schemaEntry","isNestedSchema","Array","isArray","rawValue","notEmpty","array","blocks","index","getBlock","substring","parseArray","_value","parseValue","required","parse","parseCustomValue","String","Number","isFinite","isNaN","x","isInteger","test","isURL","isEmail","date","Boolean","parseValueOfType","oneOf","validate","message","endCharacter","startIndex","character","block","convertMapToSchema","readXlsxFileContents","contents","sheetRelationId","getSheets","_sheet","leftTop","rightBottom","colsCount","rowsCount","transformData","readXlsx","readXlsxFile","exportTabDelimitedFile","headers","items","fileTitle","unshift","csv","objArray","JSON","str","line","convertToTabDelimited","stringify","exportedFilenmae","blob","Blob","link","createElement","download","url","createObjectURL","setAttribute","visibility","body","appendChild","click","removeChild","App","setTemplateHeaders","setVisibilitySettings","setMailManifestHeaders","mailManifestRows","setMailManifestRows","setMappings","setValues","useEffect","console","log","cachedVisibilitySettings","cache","localStorage","getItem","cachedMappings","cachedValues","setItem","htmlFor","then","catch","rowObjs","obj","idx","month","getMonth","day","getDate","year","getFullYear","formatDate","prevMappings","prevValues","prevSettings","arr","onClick","aggregate","aggregateAndDownload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.514ba817.chunk.js","sourcesContent":["import React from 'react';\n\nfunction MappingCell({ id, addMapping, mailManifestHeaders, mapping }) {\n  const handleMappingSelect = event => {\n    addMapping(id, event.target.value);\n  };\n\n  return (\n    <>\n      <select\n        onChange={handleMappingSelect}\n        value={mapping || ''}\n      >\n        <option value=\"\" />\n        {mailManifestHeaders.map(header => (\n          <option\n            key={`option_${header}`}\n            value={header}\n          >\n            {header}\n          </option>\n        ))}\n      </select>\n    </>\n  );\n};\n\nexport default MappingCell;\n","import React from 'react';\n\nfunction InputCell({ id, addValue, value }) {\n  const handleInputChange = event => {\n    addValue(id, event.target.value);\n  };\n\n  return (\n    <input\n      type=\"text\"\n      onChange={handleInputChange}\n      value={value}\n    />\n  );\n}\n\nexport default InputCell;\n","import React, { useState } from 'react';\n\nimport MappingCell from './MappingCell';\nimport InputCell from './InputCell';\n\nfunction CellSelector({ id, addMapping, addValue, isHidden, mailManifestHeaders, mapping, value }) {\n  const [cellType, setCellType] = useState('');\n\n  const chooseCellType = event => {\n    setCellType(event.target.value);\n  };\n\n  return (\n    <td className={isHidden ? '' : 'hidden'}>\n      <select\n        onChange={chooseCellType}\n        value={cellType || ''}\n      >\n        <option value=\"\" />\n        <option value=\"mapper\">Mapper</option>\n        <option value=\"input\">Input</option>\n      </select>\n      <br />\n      <br />\n      {(mapping || cellType === 'mapper') ? (\n        <MappingCell\n          id={id}\n          addMapping={addMapping}\n          mailManifestHeaders={mailManifestHeaders}\n          mapping={mapping}\n        />\n      ) : (value || cellType === 'input') ? (\n        <InputCell\n          id={id}\n          addValue={addValue}\n          value={value}\n        />\n      ) : null}\n    </td>\n  );\n}\n\nexport default CellSelector;\n","import React from 'react';\n\nimport CellSelector from './CellSelector';\n\nfunction Table({\n  addMapping,\n  addValue,\n  mailManifestHeaders,\n  mappings,\n  templateHeaders,\n  toggleColumn,\n  values,\n  visibilitySettings,\n}) {\n  return (\n    <table>\n      <thead>\n        <tr>\n          {templateHeaders\n            .map(header  => (\n              <td\n                key={`header_${header}`}\n                className={visibilitySettings.indexOf(header) === -1 ? '' : 'hidden'}\n              >\n                <span>{header}</span>\n                <br />\n                <input\n                  id={`toggle_${header}`}\n                  type=\"checkbox\"\n                  onChange={toggleColumn}\n                  checked={visibilitySettings.indexOf(header) === -1}\n                />\n              </td>\n            ))\n          }\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          {mailManifestHeaders.length > 0 && templateHeaders.map(header => (\n            <CellSelector\n              key={`cell_${header}`}\n              id={header}\n              addMapping={addMapping}\n              addValue={addValue}\n              isHidden={visibilitySettings.indexOf(header) === -1}\n              mailManifestHeaders={mailManifestHeaders}\n              mapping={mappings[header] || ''}\n              value={values[header] || ''}\n            />\n          ))}\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","import { loadAsync } from 'jszip';\n\n/**\n * Reads XLSX file in a browser.\n * @param  {file} file - A file being uploaded in the browser.\n * @return {Promise} Resolves to an object holding XLSX file entries.\n */\nexport default async function unpackXlsxFile(file) {\n\tconst zip = await loadAsync(file);\n  const files = [];\n  zip.forEach((_, zipEntry) => {\n    if (!zipEntry.dir) {\n      files.push(zipEntry.name);\n    }\n  });\n  const entries = {};\n  await Promise.all(files.map(async (file_1) => {\n    const content = await zip.file(file_1).async('string');\n    return entries[file_1] = content;\n  }));\n  return entries;\n}\n","import xpath from 'xpath';\nimport XMLDOM from 'xmldom';\n\nconst xmlNode = {\n\tcreateDocument(content) {\n\t\treturn new XMLDOM.DOMParser().parseFromString(content)\n\t},\n\n\tselect(doc, node, path, namespaces = {}) {\n\t\tconst select = xpath.useNamespaces(namespaces)\n\t\treturn select(path, node || doc)\n\t}\n};\n\nexport default xmlNode;\n","// Parses an Excel Date (\"serial\") into a\n// corresponding javascript Date in UTC+0 timezone.\n// (with time equal to 12:00)\n//\n// Doesn't account for leap seconds.\n// Therefore is not 100% correct.\n// But will do, I guess, since we're\n// not doing rocket science here.\n//\n// https://www.pcworld.com/article/3063622/software/mastering-excel-date-time-serial-numbers-networkdays-datevalue-and-more.html\n// \"If you need to calculate dates in your spreadsheets,\n//  Excel uses its own unique system, which it calls Serial Numbers\".\n//\nexport default function parseExcelDate(excelSerialDate, options) {\n  // https://support.microsoft.com/en-gb/help/214330/differences-between-the-1900-and-the-1904-date-system-in-excel\n  if (options && options.epoch1904) {\n    excelSerialDate += 1462;\n  }\n\n  // \"Excel serial date\" is just\n  // the count of days since `01/01/1900`\n  // (seems that it may be even fractional).\n  //\n  // The count of days elapsed\n  // since `01/01/1900` (Excel epoch)\n  // till `01/01/1970` (Unix epoch).\n  // Accounts for leap years\n  // (19 of them, yielding 19 extra days).\n  const daysBeforeUnixEpoch = 70 * 365 + 19;\n\n  // An hour, approximately, because a minute\n  // may be longer than 60 seconds, see \"leap seconds\".\n  const hour = 60 * 60 * 1000;\n\n  // `Math.round()` rounds all time fractions\n  // smaller than a millisecond (e.g. nanoseconds)\n  return new Date(\n    Math.round((excelSerialDate - daysBeforeUnixEpoch) * 24 * hour),\n  );\n}\n","import parseDate from './parseDate';\n\nconst namespaces = {\n  a: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n  // This one seems to be for `r:id` attributes on `<sheet>`s.\n  r: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n  // This one seems to be for `<Relationships/>` file.\n  rr: 'http://schemas.openxmlformats.org/package/2006/relationships',\n};\n\n// Maps \"A1\"-like coordinates to `{ row, column }` numeric coordinates.\nconst letters = [\n  '',\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n];\n\n/**\n * Reads an (unzipped) XLSX file structure into a 2D array of cells.\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\n * @param  {number?} options.sheet - Workbook sheet id (`1` by default).\n * @param  {string?} options.dateFormat - Date format, e.g. \"MM/DD/YY\". Values having this format template set will be parsed as dates.\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\n * @return {object} An object of shape `{ data, cells, properties }`. `data: string[][]` is an array of rows, each row being an array of cell values. `cells: string[][]` is an array of rows, each row being an array of cells. `properties: object` is the spreadsheet properties (e.g. whether date epoch is 1904 instead of 1900).\n */\nexport default function readXlsx(contents, xml, options = {}) {\n  if (!options.sheet) {\n    options = {\n      sheet: 1,\n      ...options,\n    };\n  }\n\n  // Some Excel editors don't want to use standard naming scheme for sheet files.\n  // https://github.com/tidyverse/readxl/issues/104\n  const fileNames = parseFileNames(contents['xl/_rels/workbook.xml.rels'], xml);\n  // Default file path for \"shared strings\": \"xl/sharedStrings.xml\".\n  const values = parseValues(contents[`xl/${fileNames.sharedStrings}`], xml);\n  // Default file path for \"styles\": \"xl/styles.xml\".\n  const styles = parseStyles(contents[`xl/${fileNames.styles}`], xml);\n  const properties = parseProperties(contents['xl/workbook.xml'], xml);\n\n  // A feature for getting the list of sheets in an Excel file.\n  // https://github.com/catamphetamine/read-excel-file/issues/14\n  if (options.getSheets) {\n    return properties.sheets.map(({ name }) => ({\n      name,\n    }));\n  }\n\n  // Find the sheet by name, or take the first one.\n  let sheetRelationId;\n  if (typeof options.sheet === 'number') {\n    const _sheet = properties.sheets[options.sheet - 1];\n    sheetRelationId = _sheet && _sheet.relationId;\n  } else {\n    for (const sheet of properties.sheets) {\n      if (sheet.name === options.sheet) {\n        sheetRelationId = sheet.relationId;\n        break;\n      }\n    }\n  }\n\n  // If the sheet wasn't found then throw an error.\n  // Example: \"xl/worksheets/sheet1.xml\".\n  if (!sheetRelationId || !fileNames.sheets[sheetRelationId]) {\n    throw createSheetNotFoundError(options.sheet, properties.sheets);\n  }\n\n  // Parse sheet data.\n  const sheet = parseSheet(\n    contents[`xl/${fileNames.sheets[sheetRelationId]}`],\n    xml,\n    values,\n    styles,\n    properties,\n    options,\n  );\n\n  // If the sheet is empty.\n  if (sheet.cells.length === 0) {\n    if (options.properties) {\n      return {\n        data: [],\n        properties,\n      };\n    }\n    return [];\n  }\n\n  const [leftTop, rightBottom] = sheet.dimensions;\n\n  const colsCount = rightBottom.column - leftTop.column + 1;\n  const rowsCount = rightBottom.row - leftTop.row + 1;\n\n  // `sheet.cells` seem to not necessarily be sorted by row and column.\n  let data = new Array(rowsCount);\n  let i = 0;\n  while (i < rowsCount) {\n    data[i] = new Array(colsCount);\n    let j = 0;\n    while (j < colsCount) {\n      data[i][j] = null;\n      j++;\n    }\n    i++;\n  }\n  for (const cell of sheet.cells) {\n    const row = cell.row - leftTop.row;\n    const column = cell.column - leftTop.column;\n    data[row][column] = cell.value;\n  }\n\n  // Fill in the row map.\n  const { rowMap } = options;\n  if (rowMap) {\n    let i = 0;\n    while (i < data.length) {\n      rowMap[i] = i;\n      i++;\n    }\n  }\n\n  data = dropEmptyRows(dropEmptyColumns(data, { onlyTrimAtTheEnd: true }), {\n    onlyTrimAtTheEnd: true,\n    rowMap,\n  });\n\n  if (options.transformData) {\n    data = options.transformData(data);\n    // data = options.transformData(data, {\n    //   dropEmptyRowsAndColumns(data) {\n    //     return dropEmptyRows(dropEmptyColumns(data), { rowMap })\n    //   }\n    // })\n  }\n\n  if (options.properties) {\n    return {\n      data,\n      properties,\n    };\n  }\n\n  return data;\n}\n\nfunction calculateDimensions(cells) {\n  const comparator = (a, b) => a - b;\n  const allRows = cells.map((cell) => cell.row).sort(comparator);\n  const allCols = cells.map((cell) => cell.column).sort(comparator);\n  const minRow = allRows[0];\n  const maxRow = allRows[allRows.length - 1];\n  const minCol = allCols[0];\n  const maxCol = allCols[allCols.length - 1];\n\n  return [\n    { row: minRow, column: minCol },\n    { row: maxRow, column: maxCol },\n  ];\n}\n\nfunction colToInt(col) {\n  // `for ... of ...` would require Babel polyfill for iterating a string.\n  let n = 0;\n  let i = 0;\n  while (i < col.length) {\n    n *= 26;\n    n += letters.indexOf(col[i]);\n    i++;\n  }\n  return n;\n}\n\nfunction CellCoords(coords) {\n  // Examples: \"AA2091\", \"R988\", \"B1\"\n  coords = coords.split(/(\\d+)/);\n  return [\n    // Row.\n    parseInt(coords[1]),\n    // Column.\n    colToInt(coords[0].trim()),\n  ];\n}\n\nfunction Cell(cellNode, sheet, xml, values, styles, properties, options) {\n  const coords = CellCoords(cellNode.getAttribute('r'));\n\n  let value = xml.select(sheet, cellNode, 'a:v', namespaces)[0];\n  // For `xpath` `value` can be `undefined` while for native `DOMParser` it's `null`.\n  // So using `value && ...` instead of `if (value !== undefined) { ... }` here.\n  value = value && value.textContent;\n\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\n  switch (cellNode.getAttribute('t')) {\n    // If the cell contains formula string.\n    case 'str':\n      value = value.trim();\n      if (value === '') {\n        value = undefined;\n      }\n      break;\n\n    // If the cell contains a \"shared\" string.\n    case 's':\n      // If a cell has no value then there's no `<c/>` element for it.\n      // If a `<c/>` element exists then it's not empty.\n      // The `<v/>`alue is a key in the \"shared strings\" dictionary of the\n      // XLSX file, so look it up in the `values` dictionary by the numeric key.\n      value = values[parseInt(value)].trim();\n      if (value === '') {\n        value = undefined;\n      }\n      break;\n\n    case 'b':\n      value = value === '1' ? true : false;\n      break;\n\n    case 'n':\n    // Default type is \"n\".\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\n    // eslint-disable-next-line no-fallthrough\n    default:\n      if (value === undefined) {\n        break;\n      }\n      value = parseFloat(value);\n      // XLSX has no specific format for dates.\n      // Sometimes a date can be heuristically detected.\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\n      const style = styles[parseInt(cellNode.getAttribute('s') || 0)];\n      if (\n        (style.numberFormat.id >= 14 && style.numberFormat.id <= 22) ||\n        (style.numberFormat.id >= 45 && style.numberFormat.id <= 47) ||\n        (options.dateFormat &&\n          style.numberFormat.template === options.dateFormat) ||\n        (options.smartDateParser !== false &&\n          style.numberFormat.template &&\n          isDateTemplate(style.numberFormat.template))\n      ) {\n        value = parseDate(value, properties);\n      }\n      break;\n  }\n\n  // Convert empty values to `null`.\n  if (value === undefined) {\n    value = null;\n  }\n\n  return {\n    row: coords[0],\n    column: coords[1],\n    value,\n  };\n}\n\nexport function dropEmptyRows(\n  data,\n  { rowMap, accessor = (_) => _, onlyTrimAtTheEnd } = {},\n) {\n  // Drop empty rows.\n  let i = data.length - 1;\n  while (i >= 0) {\n    // Check if the row is empty.\n    let empty = true;\n    for (const cell of data[i]) {\n      if (accessor(cell) !== null) {\n        empty = false;\n        break;\n      }\n    }\n    // Remove the empty row.\n    if (empty) {\n      data.splice(i, 1);\n      if (rowMap) {\n        rowMap.splice(i, 1);\n      }\n    } else if (onlyTrimAtTheEnd) {\n      break;\n    }\n    i--;\n  }\n  return data;\n}\n\nexport function dropEmptyColumns(\n  data,\n  { accessor = (_) => _, onlyTrimAtTheEnd } = {},\n) {\n  let i = data[0].length - 1;\n  while (i >= 0) {\n    let empty = true;\n    for (const row of data) {\n      if (accessor(row[i]) !== null) {\n        empty = false;\n        break;\n      }\n    }\n    if (empty) {\n      let j = 0;\n      while (j < data.length) {\n        data[j].splice(i, 1);\n        j++;\n      }\n    } else if (onlyTrimAtTheEnd) {\n      break;\n    }\n    i--;\n  }\n  return data;\n}\n\nfunction parseSheet(content, xml, values, styles, properties, options) {\n  const sheet = xml.createDocument(content);\n\n  const cells = xml\n    .select(sheet, null, '/a:worksheet/a:sheetData/a:row/a:c', namespaces)\n    .map((node) => Cell(node, sheet, xml, values, styles, properties, options));\n\n  if (cells.length === 0) {\n    return { cells };\n  }\n\n  // \"//a:dimension/@ref\" causes \"RangeError: Maximum call stack size exceeded\" error.\n  // That selector was in the legacy code I copy-pasted and no one knows why it was there.\n  // let dimensions = xml.select(sheet, null, '//a:dimension/@ref', namespaces)[0]\n  let dimensions = xml.select(\n    sheet,\n    null,\n    '/a:worksheet/a:dimension/@ref',\n    namespaces,\n  )[0];\n\n  if (dimensions) {\n    dimensions = dimensions.textContent\n      .split(':')\n      .map(CellCoords)\n      .map(([row, column]) => ({\n        row,\n        column,\n      }));\n    // When there's only a single cell on a sheet\n    // there can sometimes be just \"A1\" for the dimensions string.\n    if (dimensions.length === 1) {\n      dimensions = [dimensions[0], dimensions[0]];\n    }\n  } else {\n    dimensions = calculateDimensions(cells);\n  }\n\n  return { cells, dimensions };\n}\n\nfunction parseValues(content, xml) {\n  if (!content) {\n    return [];\n  }\n  const strings = xml.createDocument(content);\n  return xml.select(strings, null, '//a:si', namespaces).map((string) =>\n    xml\n      .select(strings, string, './/a:t[not(ancestor::a:rPh)]', namespaces)\n      .map((_) => _.textContent)\n      .join(''),\n  );\n}\n\n// http://officeopenxml.com/SSstyles.php\nfunction parseStyles(content, xml) {\n  if (!content) {\n    return {};\n  }\n  // https://social.msdn.microsoft.com/Forums/sqlserver/en-US/708978af-b598-45c4-a598-d3518a5a09f0/howwhen-is-cellstylexfs-vs-cellxfs-applied-to-a-cell?forum=os_binaryfile\n  // https://www.office-forums.com/threads/cellxfs-cellstylexfs.2163519/\n  const doc = xml.createDocument(content);\n  const baseStyles = xml\n    .select(doc, null, '//a:styleSheet/a:cellStyleXfs/a:xf', namespaces)\n    .map(parseCellStyle);\n  const numFmts = xml\n    .select(doc, null, '//a:styleSheet/a:numFmts/a:numFmt', namespaces)\n    .map(parseNumberFormatStyle)\n    .reduce((formats, format) => {\n      formats[format.id] = format;\n      return formats;\n    }, []);\n\n  return xml\n    .select(doc, null, '//a:styleSheet/a:cellXfs/a:xf', namespaces)\n    .map((xf) => {\n      if (xf.hasAttribute('xfId')) {\n        return {\n          ...baseStyles[xf.xfId],\n          ...parseCellStyle(xf, numFmts),\n        };\n      }\n      return parseCellStyle(xf, numFmts);\n    });\n}\n\nfunction parseNumberFormatStyle(numFmt) {\n  return {\n    id: numFmt.getAttribute('numFmtId'),\n    template: numFmt.getAttribute('formatCode'),\n  };\n}\n\n// http://www.datypic.com/sc/ooxml/e-ssml_xf-2.html\nfunction parseCellStyle(xf, numFmts) {\n  const style = {};\n  if (xf.hasAttribute('numFmtId')) {\n    const numberFormatId = xf.getAttribute('numFmtId');\n    if (numFmts[numberFormatId]) {\n      style.numberFormat = numFmts[numberFormatId];\n    } else {\n      style.numberFormat = { id: numberFormatId };\n    }\n  }\n  return style;\n}\n\n// I guess `xl/workbook.xml` file should always be present inside the *.xlsx archive.\nfunction parseProperties(content, xml) {\n  const book = xml.createDocument(content);\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/workbookPr.html\n  const properties = {};\n  // https://support.microsoft.com/en-gb/help/214330/differences-between-the-1900-and-the-1904-date-system-in-excel\n  const workbookProperties = xml.select(\n    book,\n    null,\n    '//a:workbookPr',\n    namespaces,\n  )[0];\n  if (\n    workbookProperties &&\n    workbookProperties.getAttribute('date1904') === '1'\n  ) {\n    properties.epoch1904 = true;\n  }\n  // Get sheets info (indexes, names, if they're available).\n  // Example:\n  // <sheets>\n  //   <sheet\n  //     xmlns:ns=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"\n  //     name=\"Sheet1\"\n  //     sheetId=\"1\"\n  //     ns:id=\"rId3\"/>\n  // </sheets>\n  // http://www.datypic.com/sc/ooxml/e-ssml_sheet-1.html\n  properties.sheets = [];\n  for (const sheet of xml.select(\n    book,\n    null,\n    '//a:sheets/a:sheet',\n    namespaces,\n  )) {\n    if (sheet.getAttribute('name')) {\n      properties.sheets.push({\n        id: sheet.getAttribute('sheetId'),\n        name: sheet.getAttribute('name'),\n        relationId: sheet.getAttribute('r:id'),\n      });\n    }\n  }\n  return properties;\n}\n\n/**\n * Returns sheet file paths.\n * Seems that the correct place to look for the\n * `sheetId` -> `filename` mapping seems to be in the\n * `xl/_rels/workbook.xml.rels` file.\n * https://github.com/tidyverse/readxl/issues/104\n * @param  {string} content — `xl/_rels/workbook.xml.rels` file contents.\n * @param  {object} xml\n * @return {object}\n */\nfunction parseFileNames(content, xml) {\n  // Example:\n  // <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n  //   ...\n  //   <Relationship\n  //     Id=\"rId3\"\n  //     Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\"\n  //     Target=\"worksheets/sheet1.xml\"/>\n  // </Relationships>\n  const document = xml.createDocument(content);\n  const fileNames = {\n    sheets: {},\n    sharedStrings: undefined,\n    styles: undefined,\n  };\n  for (const relationship of xml.select(\n    document,\n    null,\n    '/rr:Relationships/rr:Relationship',\n    namespaces,\n  )) {\n    const filePath = relationship.getAttribute('Target');\n    // eslint-disable-next-line default-case\n    switch (relationship.getAttribute('Type')) {\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles':\n        fileNames.styles = filePath;\n        break;\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings':\n        fileNames.sharedStrings = filePath;\n        break;\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet':\n        fileNames.sheets[relationship.getAttribute('Id')] = filePath;\n        break;\n    }\n  }\n  if (!fileNames.styles) {\n    throw new Error('\"styles.xml\" file not found in the *.xlsx file');\n  }\n  // Seems like \"sharedStrings.xml\" is not required to exist.\n  // For example, when the spreadsheet doesn't contain any strings.\n  // https://github.com/catamphetamine/read-excel-file/issues/85\n  // if (!fileNames.sharedStrings) {\n  //   throw new Error('\"sharedStrings.xml\" file not found in the *.xlsx file')\n  // }\n  return fileNames;\n}\n\nfunction isDateTemplate(template) {\n  const tokens = template.split(/\\W+/);\n  for (const token of tokens) {\n    if (['MM', 'DD', 'YY', 'YYYY'].indexOf(token) < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction createSheetNotFoundError(sheet, sheets) {\n  const sheetsList =\n    sheets &&\n    sheets.map((sheet, i) => `\"${sheet.name}\" (#${i + 1})`).join(', ');\n  return new Error(\n    `Sheet ${\n      typeof sheet === 'number' ? '#' + sheet : '\"' + sheet + '\"'\n    } not found in the *.xlsx file.${\n      sheets ? ' Available sheets: ' + sheetsList + '.' : ''\n    }`,\n  );\n}\n","export default function Integer() {}\n\n// https://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript\nexport function isInteger(value) {\n  if (isNaN(value)) {\n    return false;\n  }\n  const x = parseFloat(value);\n  return (x | 0) === x;\n}\n","export default function URL() {}\n\nconst regexp = /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\n\n// https://stackoverflow.com/questions/8667070/javascript-regular-expression-to-validate-url\nexport function isURL(value) {\n  return regexp.test(value);\n}\n","export default function Email() {}\n\nconst regexp = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n\nexport function isEmail(value) {\n  return regexp.test(value);\n}\n","import parseDate from './parseDate';\nimport Integer, { isInteger } from './types/Integer';\nimport URL, { isURL } from './types/URL';\nimport Email, { isEmail } from './types/Email';\n\nconst DEFAULT_OPTIONS = {\n  isColumnOriented: false,\n};\n\n/**\n * Convert 2D array to nested objects.\n * If row oriented data, row 0 is dotted key names.\n * Column oriented data is transposed.\n * @param {string[][]} data - An array of rows, each row being an array of cells.\n * @param {object} schema\n * @return {object[]}\n */\nexport default function convertToJson(data, schema, options) {\n  if (options) {\n    options = {\n      ...DEFAULT_OPTIONS,\n      ...options,\n    };\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  const { isColumnOriented, rowMap } = options;\n\n  validateSchema(schema);\n\n  if (isColumnOriented) {\n    data = transpose(data);\n  }\n\n  const columns = data[0];\n\n  const results = [];\n  const errors = [];\n\n  for (let i = 1; i < data.length; i++) {\n    const result = read(schema, data[i], i - 1, columns, errors, options);\n    if (result) {\n      results.push(result);\n    }\n  }\n\n  // Correct error rows.\n  if (rowMap) {\n    for (const error of errors) {\n      // Convert the `row` index in `data` to the\n      // actual `row` index in the spreadsheet.\n      // The `1` compensates for the header row.\n      error.row = rowMap[error.row] + 1;\n    }\n  }\n\n  return {\n    rows: results,\n    errors,\n  };\n}\n\nfunction read(schema, row, rowIndex, columns, errors, options) {\n  const object = {};\n  for (const key of Object.keys(schema)) {\n    const schemaEntry = schema[key];\n    const isNestedSchema =\n      typeof schemaEntry.type === 'object' && !Array.isArray(schemaEntry.type);\n    let rawValue = row[columns.indexOf(key)];\n    if (rawValue === undefined) {\n      rawValue = null;\n    }\n    let value;\n    let error;\n    if (isNestedSchema) {\n      value = read(schemaEntry.type, row, rowIndex, columns, errors, options);\n    } else {\n      if (rawValue === null) {\n        value = null;\n      } else if (Array.isArray(schemaEntry.type)) {\n        let notEmpty = false;\n        const array = parseArray(rawValue).map((_value) => {\n          const result = parseValue(_value, schemaEntry, options);\n          if (result.error) {\n            value = _value;\n            error = result.error;\n          }\n          if (result.value !== null) {\n            notEmpty = true;\n          }\n          return result.value;\n        });\n        if (!error) {\n          value = notEmpty ? array : null;\n        }\n      } else {\n        const result = parseValue(rawValue, schemaEntry, options);\n        error = result.error;\n        value = error ? rawValue : result.value;\n      }\n    }\n    if (!error && value === null && schemaEntry.required) {\n      error = 'required';\n    }\n    if (error) {\n      error = {\n        error,\n        row: rowIndex + 1,\n        column: key,\n        value,\n      };\n      if (schemaEntry.type) {\n        error.type = schemaEntry.type;\n      }\n      errors.push(error);\n    } else if (value !== null) {\n      object[schemaEntry.prop] = value;\n    }\n  }\n  if (Object.keys(object).length > 0) {\n    return object;\n  }\n  return null;\n}\n\n/**\n * Converts textual value to a javascript typed value.\n * @param  {string} value\n * @param  {object} schemaEntry\n * @return {{ value: any, error: string }}\n */\nexport function parseValue(value, schemaEntry, options) {\n  if (value === null) {\n    return { value: null };\n  }\n  let result;\n  if (schemaEntry.parse) {\n    result = parseCustomValue(value, schemaEntry.parse);\n  } else if (schemaEntry.type) {\n    result = parseValueOfType(\n      value,\n      Array.isArray(schemaEntry.type) ? schemaEntry.type[0] : schemaEntry.type,\n      options,\n    );\n  } else {\n    result = { value: value };\n    // throw new Error('Invalid schema entry: no .type and no .parse():\\n\\n' + JSON.stringify(schemaEntry, null, 2))\n  }\n  // If errored then return the error.\n  if (result.error) {\n    return result;\n  }\n  if (result.value !== null) {\n    if (schemaEntry.oneOf && schemaEntry.oneOf.indexOf(result.value) < 0) {\n      return { error: 'invalid' };\n    }\n    if (schemaEntry.validate) {\n      try {\n        schemaEntry.validate(result.value);\n      } catch (error) {\n        return { error: error.message };\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Converts textual value to a custom value using supplied `.parse()`.\n * @param  {string} value\n * @param  {function} parse\n * @return {{ value: any, error: string }}\n */\nfunction parseCustomValue(value, parse) {\n  try {\n    value = parse(value);\n    if (value === undefined) {\n      return { value: null };\n    }\n    return { value };\n  } catch (error) {\n    return { error: error.message };\n  }\n}\n\n/**\n * Converts textual value to a javascript typed value.\n * @param  {string} value\n * @param  {} type\n * @return {{ value: (string|number|Date|boolean), error: string }}\n */\nfunction parseValueOfType(value, type, options) {\n  switch (type) {\n    case String:\n      return { value };\n\n    case Number:\n    case Integer:\n      // The global isFinite() function determines\n      // whether the passed value is a finite number.\n      // If  needed, the parameter is first converted to a number.\n      if (!isFinite(value)) {\n        return { error: 'invalid' };\n      }\n      if (type === Integer && !isInteger(value)) {\n        return { error: 'invalid' };\n      }\n      // Convert strings to numbers.\n      // Just an additional feature.\n      // Won't happen when called from `readXlsx()`.\n      if (typeof value === 'string') {\n        value = parseFloat(value);\n      }\n      return { value };\n\n    case URL:\n      if (!isURL(value)) {\n        return { error: 'invalid' };\n      }\n      return { value };\n\n    case Email:\n      if (!isEmail(value)) {\n        return { error: 'invalid' };\n      }\n      return { value };\n\n    case Date:\n      // XLSX has no specific format for dates.\n      // Sometimes a date can be heuristically detected.\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\n      if (value instanceof Date) {\n        return { value };\n      }\n      if (typeof value === 'number') {\n        if (!isFinite(value)) {\n          return { error: 'invalid' };\n        }\n        value = parseInt(value);\n        const date = parseDate(value, options.properties);\n        if (!date) {\n          return { error: 'invalid' };\n        }\n        return { value: date };\n      }\n      return { error: 'invalid' };\n\n    case Boolean:\n      if (typeof value === 'boolean') {\n        return { value };\n      }\n      return { error: 'invalid' };\n\n    default:\n      if (typeof type === 'function') {\n        return parseCustomValue(value, type);\n      }\n      throw new Error(`Unknown schema type: ${(type && type.name) || type}`);\n  }\n}\n\nexport function getBlock(string, endCharacter, startIndex) {\n  let i = 0;\n  let substring = '';\n  while (startIndex + i < string.length) {\n    const character = string[startIndex + i];\n    if (character === endCharacter) {\n      return [substring, i];\n    } else if (character === '\"') {\n      const block = getBlock(string, '\"', startIndex + i + 1);\n      substring += block[0];\n      i += '\"'.length + block[1] + '\"'.length;\n    } else {\n      substring += character;\n      i++;\n    }\n  }\n  return [substring, i];\n}\n\nexport function parseArray(string) {\n  const blocks = [];\n  let index = 0;\n  while (index < string.length) {\n    const [substring, length] = getBlock(string, ',', index);\n    index += length + ','.length;\n    blocks.push(substring.trim());\n  }\n  return blocks;\n}\n\n// Transpose a 2D array.\n// https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript\nconst transpose = (array) => array[0].map((_, i) => array.map((row) => row[i]));\n\nfunction validateSchema(schema) {\n  for (const key of Object.keys(schema)) {\n    const entry = schema[key];\n    if (!entry.prop) {\n      throw new Error(`\"prop\" not defined for schema entry \"${key}\".`);\n    }\n  }\n}\n","export default function convertMapToSchema(map) {\n  const schema = {};\n  for (const key of Object.keys(map)) {\n    let prop = map[key];\n    let type;\n    if (typeof prop === 'object') {\n      prop = Object.keys(map[key])[0];\n      type = convertMapToSchema(map[key][prop]);\n    }\n    schema[key] = {\n      prop,\n    };\n    if (type) {\n      schema[key].type = type;\n    }\n  }\n  return schema;\n}\n","import readXlsx from './readXlsx';\nimport convertToJson from './convertToJson';\nimport convertMapToSchema from './convertMapToSchema';\n\nexport default function readXlsxFileContents(entries, xml, { schema, map, ...options}) {\n\tif (!schema && map) {\n\t\tschema = convertMapToSchema(map)\n\t}\n\tconst result = readXlsx(entries, xml, { ...options, properties: schema || options.properties })\n\tif (schema) {\n\t\treturn convertToJson(result.data, schema, { ...options, properties: result.properties })\n\t}\n\treturn result\n}\n","import unpackXlsxFile from './unpack';\n\n// Turns out IE11 doesn't support XPath, so not using the native `DOMParser` here.\n// https://github.com/catamphetamine/read-excel-file/issues/26\n// The bundle size with `./xmlBrowser` is 190 kilobytes,\n// the bundle size with `./xmlNode` is 290 kilobytes,\n// so `./xmlBrowser` polyfill is about 100 kilobytes in size.\n// Still, IE11 is a wide-spread browser and it's unlikely that\n// anyone would ignore it for now.\n// import xml from './xmlBrowser'\nimport xml from './xmlNode';\nimport readXlsxFileContents from './read';\n\n/**\n * Reads XLSX file into a 2D array of cells in a browser.\n * @param  {file} file - A file being uploaded in the browser.\n * @param  {object?} options\n * @param  {(number|string)?} options.sheet - Excel document sheet to read. Defaults to `1`. Will only read this sheet and skip others.\n * @return {Promise} Resolves to a 2D array of cells: an array of rows, each row being an array of cells.\n */\nexport default async function readXlsxFile(file, options = {}) {\n\tconst entries = await unpackXlsxFile(file);\n  return readXlsxFileContents(entries, xml, options);\n}\n","import readXlsxFile from './read-excel-file';\n\nexport function handleTemplate(file) {\n  return readXlsxFile(file, { dateFormat: 'DD/MM/YYYY' })\n    .then(([headers]) => headers)\n    .catch(console.log);\n}\n\nfunction formatDate(date) {\n  let month = '' + (date.getMonth() + 1);\n  let day = '' + date.getDate();\n  const year = date.getFullYear();\n\n  if (month.length < 2) month = '0' + month;\n  if (day.length < 2) day = '0' + day;\n\n  return [year, month, day].join('-');\n}\n\nexport function handleMailManifest(file) {\n  return readXlsxFile(file)\n    .then(([headers, ...rows]) => {\n      const rowObjs = rows.map((row) =>\n        row.reduce((obj, column, idx) => {\n          let col = column;\n          if (col instanceof Date) {\n            col = formatDate(col);\n          }\n          return {\n            ...obj,\n            [headers[idx]]: col,\n          };\n        }, {}),\n      );\n      return [headers, rowObjs];\n    })\n    .catch(console.log);\n}\n\nfunction convertToTabDelimited(objArray) {\n  const array = typeof objArray !== 'object' ? JSON.parse(objArray) : objArray;\n  let str = '';\n\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < array.length; i++) {\n    let line = '';\n    for (const index in array[i]) {\n      // TODO: Do we need to add a tab after an empty line anyway?\n      if (line !== '') line += '\\t';\n\n      line += array[i][index];\n    }\n\n    str += `${line}\\r\\n`;\n  }\n\n  return str;\n}\n\nexport function exportTabDelimitedFile(headers, items, fileTitle) {\n  if (headers) {\n    items.unshift(headers);\n  }\n\n  // Convert Object to JSON\n  const jsonObject = JSON.stringify(items);\n\n  const csv = convertToTabDelimited(jsonObject);\n\n  const exportedFilenmae = fileTitle ? `${fileTitle}.txt` : 'export.txt';\n\n  const blob = new Blob([csv], { type: 'text/plain;charset=utf-8;' });\n\n  const link = document.createElement('a');\n  if (link.download !== undefined) {\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', exportedFilenmae);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n}\n\nexport function aggregateAndDownload(\n  templateHeaders,\n  mappings,\n  values,\n  mailManifestRows,\n) {\n  const aggregate = mailManifestRows.map((row) => {\n    return templateHeaders.reduce((obj, header) => {\n      if (!mappings[header] && !values[header]) {\n        return {\n          ...obj,\n          [header]: '',\n        };\n      }\n      return {\n        ...obj,\n        [header]: mappings[header] ? row[mappings[header]] : values[header],\n      };\n    }, {});\n  });\n\n  exportTabDelimitedFile(templateHeaders, aggregate);\n}\n","import React, { useEffect, useState } from 'react';\n\nimport './App.css';\nimport Table from './components/Table';\n\nimport { aggregateAndDownload, handleMailManifest, handleTemplate } from './utils/excel';\n\nfunction App() {\n  const [templateHeaders, setTemplateHeaders] = useState([]);\n  const [visibilitySettings, setVisibilitySettings] = useState([]);\n  const [mailManifestHeaders, setMailManifestHeaders] = useState([]);\n  const [mailManifestRows, setMailManifestRows] = useState([]);\n  const [mappings, setMappings] = useState({});\n  const [values, setValues] = useState({});\n\n  useEffect(() => {\n    console.log(mappings);\n    console.log(values);\n  }, [mappings, values]);\n\n  // Load visibilitySettings cache\n  useEffect(() => {\n    const cache = localStorage.getItem('visibilitySettings');\n    let cachedVisibilitySettings;\n\n    try {\n      cachedVisibilitySettings = JSON.parse(cache);\n    } catch {\n      cachedVisibilitySettings = [];\n    }\n\n    setVisibilitySettings(cachedVisibilitySettings);\n  }, []);\n\n  // Load mappings cache\n  useEffect(() => {\n    const cache = localStorage.getItem('mappings');\n    let cachedMappings;\n\n    try {\n      cachedMappings = JSON.parse(cache);\n    } catch {\n      cachedMappings = [];\n    }\n\n    setMappings(cachedMappings);\n  }, []);\n\n   // Load values cache\n   useEffect(() => {\n    const cache = localStorage.getItem('values');\n    let cachedValues;\n\n    try {\n      cachedValues = JSON.parse(cache);\n    } catch {\n      cachedValues = [];\n    }\n\n    setValues(cachedValues);\n  }, []);\n\n  // Cache column visibility\n  useEffect(() => {\n    localStorage.setItem('visibilitySettings', JSON.stringify(visibilitySettings || []));\n  }, [visibilitySettings]);\n\n  // Cache mappings\n  useEffect(() => {\n    localStorage.setItem('mappings', JSON.stringify(mappings || {}));\n  }, [mappings]);\n\n  // Cache values\n  useEffect(() => {\n    localStorage.setItem('values', JSON.stringify(values || {}));\n  }, [values]);\n\n  const toggleColumn = event => {\n    const [, ...rest] = event.target.id.split('_');\n    const id = rest.join('_');\n    setVisibilitySettings(prevSettings => {\n      const arr = [...prevSettings];\n      const index = prevSettings.indexOf(id);\n      if (index > -1) {\n        arr.splice(index, 1);\n      } else {\n        arr.push(id);\n      }\n      return arr;\n    });\n  };\n\n  const importTemplate = event => {\n    handleTemplate(event.target.files[0])\n      .then(setTemplateHeaders);\n  };\n\n  const importMailManifest = event => {\n    handleMailManifest(event.target.files[0])\n      .then(([headers, rowObjs]) => {\n        setMailManifestHeaders(headers);\n        setMailManifestRows(rowObjs);\n      });\n  };\n\n  const addMapping = (key, value) => {\n    setMappings(prevMappings => ({\n      ...prevMappings,\n      [key]: value,\n    }))\n  };\n\n  const addValue = (key, value) => {\n    setValues(prevValues => ({\n      ...prevValues,\n      [key]: value,\n    }))\n  };\n\n  const download = () => {\n    aggregateAndDownload(templateHeaders, mappings, values, mailManifestRows);\n  };\n\n  return (\n    <div className=\"app\">\n      <form>\n        <label htmlFor=\"template\">\n          Upload Template File\n          <br />\n          <br />\n          <input\n            id=\"template\"\n            type=\"file\"\n            name=\"template\"\n            onChange={importTemplate}\n          />\n        </label>\n        <br />\n        <br />\n        <label htmlFor=\"mail_manifest\">\n          Upload Mail Manifest\n          <br />\n          <br />\n          <input\n            id=\"mail_manifest\"\n            type=\"file\"\n            name=\"mail_manifest\"\n            onChange={importMailManifest}\n          />\n        </label>\n        <br />\n        <br />\n        {templateHeaders.length > 0 && (\n          <Table\n            addMapping={addMapping}\n            addValue={addValue}\n            mailManifestHeaders={mailManifestHeaders}\n            mappings={mappings}\n            templateHeaders={templateHeaders}\n            toggleColumn={toggleColumn}\n            values={values}\n            visibilitySettings={visibilitySettings}\n          />\n        )}\n        <br />\n        <br />\n        <div>\n          <button type=\"button\" onClick={download}>\n            Download Amazon Upload File\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}